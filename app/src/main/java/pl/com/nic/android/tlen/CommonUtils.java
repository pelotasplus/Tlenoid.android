package pl.com.nic.android.tlen;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.ContextMenu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.squareup.picasso.Picasso;

public class CommonUtils
{
	private static final String TAG = "Tlenoid";
	
    public static final Pattern EMAIL_ADDRESS = Pattern.compile(
        "[a-zA-Z0-9\\+\\.\\_\\%\\-\\+]{1,256}" +
        "\\@" +
        "[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}" +
        "(" +
            "\\." +
            "[a-zA-Z0-9][a-zA-Z0-9\\-]{0,25}" +
        ")+"
    );
    
    
    /**
     *  Regular expression to match all IANA top-level domains for WEB_URL.
     *  List accurate as of 2010/02/05.  List taken from:
     *  http://data.iana.org/TLD/tlds-alpha-by-domain.txt
     *  This pattern is auto-generated by frameworks/base/common/tools/make-iana-tld-pattern.py
     */
    public static final String TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL =
        "(?:"
        + "(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])"
        + "|(?:biz|b[abdefghijmnorstvwyz])"
        + "|(?:cat|com|coop|c[acdfghiklmnoruvxyz])"
        + "|d[ejkmoz]"
        + "|(?:edu|e[cegrstu])"
        + "|f[ijkmor]"
        + "|(?:gov|g[abdefghilmnpqrstuwy])"
        + "|h[kmnrtu]"
        + "|(?:info|int|i[delmnoqrst])"
        + "|(?:jobs|j[emop])"
        + "|k[eghimnprwyz]"
        + "|l[abcikrstuvy]"
        + "|(?:mil|mobi|museum|m[acdeghklmnopqrstuvwxyz])"
        + "|(?:name|net|n[acefgilopruz])"
        + "|(?:org|om)"
        + "|(?:pro|p[aefghklmnrstwy])"
        + "|qa"
        + "|r[eosuw]"
        + "|s[abcdeghijklmnortuvyz]"
        + "|(?:tel|travel|t[cdfghjklmnoprtvwz])"
        + "|u[agksyz]"
        + "|v[aceginu]"
        + "|w[fs]"
        + "|(?:xn\\-\\-0zwm56d|xn\\-\\-11b5bs3a9aj6g|xn\\-\\-80akhbyknj4f|xn\\-\\-9t4b11yi5a|xn\\-\\-deba0ad|xn\\-\\-g6w251d|xn\\-\\-hgbk6aj7f53bba|xn\\-\\-hlcj6aya9esc7a|xn\\-\\-jxalpdlp|xn\\-\\-kgbechtv|xn\\-\\-zckzah)"
        + "|y[etu]"
        + "|z[amw]))";

    /**
     * Good characters for Internationalized Resource Identifiers (IRI).
     * This comprises most common used Unicode characters allowed in IRI
     * as detailed in RFC 3987.
     * Specifically, those two byte Unicode characters are not included.
     */
    public static final String GOOD_IRI_CHAR =
        "a-zA-Z0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF";

    /**
     *  Regular expression pattern to match most part of RFC 3987
     *  Internationalized URLs, aka IRIs.  Commonly used Unicode characters are
     *  added.
     */
    public static final Pattern WEB_URL = Pattern.compile(
        "((?:(http|https|Http|Https|rtsp|Rtsp):\\/\\/(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)"
        + "\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_"
        + "\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@)?)?"
        + "((?:(?:[" + GOOD_IRI_CHAR + "][" + GOOD_IRI_CHAR + "\\-]{0,64}\\.)+"   // named host
        + TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL
        + "|(?:(?:25[0-5]|2[0-4]" // or ip address
        + "[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(?:25[0-5]|2[0-4][0-9]"
        + "|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1]"
        + "[0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}"
        + "|[1-9][0-9]|[0-9])))"
        + "(?:\\:\\d{1,5})?)" // plus option port number
        + "(\\/(?:(?:[" + GOOD_IRI_CHAR + "\\;\\/\\?\\:\\@\\&\\=\\#\\~"  // plus option query params
        + "\\-\\.\\+\\!\\*\\'\\(\\)\\,\\_])|(?:\\%[a-fA-F0-9]{2}))*)?"
        + "(?:\\b|$)"); // and finally, a word boundary or end of
                        // input.  This is to stop foo.sure from
                        // matching as foo.su
    
	
	public static int
	buddy_status2drawable(String status)
	{
		if (status.equals("available")) {
			return R.drawable.online;
		} else if (status.equals("away")) {
			return R.drawable.away;
		} else if (status.equals("xa")) {
			return R.drawable.xa;
		} else if (status.equals("dnd")) {
			return R.drawable.dnd;
		} else if (status.equals("unauthorized")) {
			return R.drawable.unauthorized;
		} else if (status.equals("chat")) {
			return R.drawable.chat;
		} else {
			return R.drawable.unavailable;
		}
	}

	
	public static void
	blockSendButton(View v)
	{
		Button btn = (Button) v.findViewById(R.id.send_button);
		btn.setEnabled(false);
		
		EditText edittext = (EditText) v.findViewById(R.id.edittext);
		edittext.setEnabled(false);
	}
	
	
	public static void
	unblockSendButton(View v)
	{
		Button btn = (Button) v.findViewById(R.id.send_button);
		btn.setEnabled(true);
		
		EditText edittext = (EditText) v.findViewById(R.id.edittext);
		edittext.setEnabled(true);
	}
	
	
	public static void
	setBuddyDesc(Context context, View v, RosterItem o)
	{
		if (o == null)
			return;

		// Log.d("Tlenoid", "setBuddyDesc: o=" + o.toString() + ", v=" + v.toString());

		String desc  = o.getPrettyDescription();
		String alias = o.getPrettyAlias();

		TextView  aliasView = (TextView) v.findViewById(R.id.alias);
		TextView  statusView = (TextView) v.findViewById(R.id.status);
		ImageView img = (ImageView) v.findViewById(R.id.statusImg);
		ImageView avtImg = (ImageView) v.findViewById(R.id.avatarImg);

		aliasView.setText(alias);

		RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
			RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
		lp.addRule(RelativeLayout.RIGHT_OF, img.getId());

		if (desc.equals("")) {
			statusView.setVisibility(View.GONE);

			lp.addRule(RelativeLayout.CENTER_VERTICAL);
		} else {
			statusView.setVisibility(View.VISIBLE);
			statusView.setText(desc);
		}

		aliasView.setLayoutParams(lp);

		if (avtImg != null) {
			String avatar_path = o.getAvatarPath();
            if (!TextUtils.isEmpty(avatar_path)) {

                Picasso picasso = Picasso.with(context);
                picasso.setIndicatorsEnabled(BuildConfig.PICASSO_DEBUG);
                picasso.load(avatar_path).into(avtImg);

				avtImg.setVisibility(View.VISIBLE);
			} else {
				avtImg.setVisibility(View.INVISIBLE);
			}
		}

		img.setImageResource(buddy_status2drawable(o.getStatus()));
	}

	public static void
	postToTlenService(Context ctx, String cmd, Bundle b)
	{
		Intent i = new Intent(ctx, TlenService.class);
		if (b != null)
			i.putExtras(b);
		i.putExtra("cmd", cmd);
		
		Log.d(TAG, "postToTlenService: " + cmd);
		
		ctx.startService(i);
	}
	
	
	public static void
	stopTlenService(Context ctx)
	{
		Intent i = new Intent(ctx, TlenService.class);
		ctx.stopService(i);
	}
	
	public static void
	extendContextMenu(Context ctx, ContextMenu menu, String desc)
	{
		Log.d("Tlenoid", "processContestMenu");
		
		MenuItem mi = menu.add(0, -1, 0, ctx.getString(R.string.context_menu_copy_to_clipboard));
		Intent i = new Intent(ctx, Tlenoid.class);
		i.putExtra("action", "copy_to_clipboard");
		i.putExtra("data", desc);
		mi.setIntent(i);

		Matcher m = CommonUtils.EMAIL_ADDRESS.matcher(desc);
		while (m.find()) {
			String action = ctx.getString(R.string.context_menu_mail_to) + " " + m.group();
			mi = menu.add(0, -1, 0, action);
			i = new Intent(Intent.ACTION_SEND);
			i.setType("plain/text");
			i.putExtra(android.content.Intent.EXTRA_EMAIL, new String[]{m.group()});
			mi.setIntent(Intent.createChooser(i, action));
		}

		m = CommonUtils.WEB_URL.matcher(desc);
		while (m.find()) {
			String url = m.group();
			if (!url.startsWith("http://") && !url.startsWith("https://"))
				   url = "http://" + url;
			String action = ctx.getString(R.string.context_menu_go_to) + " " + url;
			mi = menu.add(0, -1, 0, action);
			i = new Intent(Intent.ACTION_VIEW);
			i.setData(Uri.parse(url));
			mi.setIntent(Intent.createChooser(i, action));
		}
	}
}
